const prompts = require('prompts');
const logger = require('./logger');
const path = require('path');
const { MAIN_APP_CONFIG } = require('./constants');
const { getUrlSafeFileName } = require('./utils');

async function getExtensionConfig(configuration, extension) {
  const extensionOptions = Object.keys(configuration);

  if (
    (extension && configuration[extension]) ||
    extensionOptions.length === 1
  ) {
    const extensionToRun = extension || extensionOptions[0];
    const { data } = configuration[extensionToRun];
    return {
      key: extensionToRun,
      name: data.title,
      file: data?.module?.file,
      output: data?.output,
      appName: data?.appName,
    };
  }

  const response = await prompts(
    [
      {
        type: 'select',
        name: 'extension',
        message: 'Which extension would you like to run?',
        choices: extensionOptions.map(option => {
          const { data } = configuration[option];
          return {
            title: option,
            value: {
              key: option,
              name: data?.title,
              file: data?.module?.file,
              output: data?.output,
              appName: data?.appName,
            },
          };
        }),
      },
    ],
    {
      onCancel: () => {
        process.exit(0); // When the user cancels interaction, exit the script
      },
    }
  );
  return response.extension;
}

function _loadRequiredConfigFile(filePath) {
  let config;
  try {
    config = require(filePath);
  } catch (e) {
    logger.error(
      `Unable to load ${filePath} file.  Please make sure you are running the command from the src/app/extensions directory and that ${filePath} exists`
    );
    process.exit(1);
  }
  return config;
}

function loadConfig() {
  // app.json is one level up from the extensions directory, which is where these commands
  // will need to be ran from, the extensions directory
  const configPath = path.join(process.cwd(), `../${MAIN_APP_CONFIG}`);

  const mainAppConfig = _loadRequiredConfigFile(configPath);

  const crmCardsSubConfigFiles = mainAppConfig?.extensions?.crm?.cards;
  if (!crmCardsSubConfigFiles) {
    logger.error(
      `The "extensions.crm.cards" array in ${configPath} is missing, it is a required configuration property`
    );
    process.exit(1);
  } else if (crmCardsSubConfigFiles.length === 0) {
    logger.error(
      `The "extensions.crm.cards" array in ${configPath} is empty, it is a required configuration property.`
    );
    process.exit(1);
  }

  const outputConfig = {};

  crmCardsSubConfigFiles.forEach(card => {
    const extensionsRemoved = card.file.replace('extensions/', '');
    const cardConfigPath = path.join(process.cwd(), extensionsRemoved);
    // Get the path to the config file relative to the extensions directory
    const configPathRelativeToExtensions = path.parse(extensionsRemoved)?.dir;

    try {
      const cardConfig = require(cardConfigPath);

      // Join the two relative paths
      const entryPointPath = path.join(
        configPathRelativeToExtensions,
        cardConfig.data?.module?.file
      );

      cardConfig.data.module.file = entryPointPath;

      outputConfig[entryPointPath] = cardConfig;
      outputConfig[entryPointPath].data.output = getUrlSafeFileName(
        entryPointPath
      );
      outputConfig[entryPointPath].data.appName = mainAppConfig.name;
    } catch (e) {
      let errorMessage = e?.message;
      if (e?.code === 'MODULE_NOT_FOUND') {
        errorMessage = `Unable to load "${cardConfigPath}" file. \nPlease make sure you are running the command from the src/app/extensions directory and that your card JSON config exists within it.`;
      }

      logger.error(errorMessage);
      process.exit(1);
    }
  });

  return outputConfig;
}

module.exports = {
  loadConfig,
  getExtensionConfig,
};
