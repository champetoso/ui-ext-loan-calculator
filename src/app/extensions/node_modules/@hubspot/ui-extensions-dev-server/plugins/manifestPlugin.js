const { readFileSync } = require('fs');
const { normalize } = require('path');
const logger = require('../logger');

const DEFAULT_MANIFEST_NAME = 'manifest.json';
const PACKAGE_LOCK_FILE = 'package-lock.json';
const PACKAGE_FILE = 'package.json';
const EXTENSIONS_PATH = 'src/app/extensions/';

function plugin(options = {}) {
  return {
    name: 'ui-extensions-manifest-generation-plugin',
    enforce: 'post', // run after default rollup plugins
    generateBundle(_rollupOptions, bundle) {
      const {
        output = DEFAULT_MANIFEST_NAME,
        minify = false,
        extensionConfig,
      } = options;
      try {
        const manifest = _generateManifestContents(bundle, extensionConfig);
        this.emitFile({
          type: 'asset',
          source: minify
            ? JSON.stringify(manifest)
            : JSON.stringify(manifest, null, 2),
          fileName: normalize(output),
        });
      } catch (e) {
        logger.warn(`\nUnable to write manifest file in ${output}, ${e}`);
      }
    },
  };
}

function _generateManifestContents(bundle, extension) {
  const baseManifest = {
    package: _loadPackageFile(),
    extension,
  };

  // The keys to bundle are the filename without any path information
  const bundles = Object.keys(bundle);

  if (bundles.length === 1) {
    return {
      ..._generateManifestEntry(bundle[bundles[0]]),
      ...baseManifest,
    };
  }

  const manifest = bundles.reduce((acc, current) => {
    return {
      ...acc,
      [current]: _generateManifestEntry(bundle[current], false),
    };
  }, {});

  return {
    ...manifest,
    ...baseManifest,
  };
}

function _generateManifestEntry(subBundle) {
  const { facadeModuleId, moduleIds, modules } = subBundle;
  return {
    entry: _stripPathPriorToExtDir(facadeModuleId),
    modules: _buildModulesInfo(moduleIds, modules),
  };
}

function _loadJsonFileSafely(filename) {
  try {
    return JSON.parse(readFileSync(filename).toString());
  } catch (e) {
    return undefined;
  }
}

function _loadPackageFile() {
  // Look for package-lock.json then fallback to package.json
  return (
    _loadJsonFileSafely(PACKAGE_LOCK_FILE) || _loadJsonFileSafely(PACKAGE_FILE)
  );
}

function _stripPathPriorToExtDir(filepath) {
  return filepath.split(EXTENSIONS_PATH).pop();
}

function _buildModulesInfo(moduleIds, modules) {
  return moduleIds.reduce(
    (acc, mod) => {
      const { renderedExports } = modules[mod];

      const moduleData = {
        module: _stripPathPriorToExtDir(mod),
        renderedExports,
      };

      if (moduleData.module.includes('node_modules')) {
        acc.external.push(moduleData);
      } else {
        acc.internal.push(moduleData);
      }
      return acc;
    },
    { internal: [], external: [] }
  );
}

module.exports = plugin;
