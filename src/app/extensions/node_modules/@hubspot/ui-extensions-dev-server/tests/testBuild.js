const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const assert = require('assert');

function _testHelper(command, outputDirFiles) {
  if (command) {
    execSync(command);
  }

  // Make sure the files are getting generated in the dist dir
  const distDir = path.join(process.cwd(), 'dist');
  const filesInOutputDir = fs.readdirSync(distDir);
  assert.deepStrictEqual(filesInOutputDir, outputDirFiles);

  // Spot check the file contents to make sure they seem ok
  filesInOutputDir.forEach(file => {
    const fileContents = fs.readFileSync(path.join(distDir, file)).toString();
    if (file === 'manifest.json') {
      const manifest = JSON.parse(fileContents);
      assert(manifest.entry);
      assert(manifest.modules);
      assert(manifest.modules.internal);
      manifest.modules.internal.forEach(mod => {
        assert(mod.module);
        assert(mod.renderedExports);
      });
      assert(manifest.modules.external);
      manifest.modules.external.forEach(mod => {
        assert(mod.module);
        assert(mod.renderedExports);
      });
      assert(manifest.package);
      assert(manifest.package.packages);
    } else {
      const stringsToSpotCheck = [
        '.createRemoteReactComponent',
        '.createElement',
        'hubspot.extend',
        'React',
        'RemoteUI',
      ];
      stringsToSpotCheck.forEach(stringToCheck => {
        assert(
          fileContents.includes(stringToCheck),
          `File ${file} contents should contain: "${stringToCheck}"`
        );
      });
    }
  });
}

function testDefaultBuildPath(logger) {
  logger.warn('- Test default build path started ðŸ¤ž');
  _testHelper('hs-ui-extensions-dev-server build', [
    'PhoneLines.js',
    'ProgressBarApp.js',
  ]);
  logger.info('- Test default build path passed ðŸš€');
}

function testBuildWithExtensionFlag(logger) {
  logger.warn('- Test build with flags started ðŸ¤ž');
  _testHelper(
    'hs-ui-extensions-dev-server build --extension ProgressBarApp.tsx',
    ['ProgressBarApp.js', 'manifest.json']
  );
  logger.info('- Test build with flags passed ðŸš€');
}

function testDefInfraBuildFileName(logger) {
  const { remoteBuild } = require('../index');
  logger.warn('- Test remoteBuild function ðŸ¤ž');

  remoteBuild(process.cwd(), 'ProgressBarApp.tsx', 'dist');
  _testHelper(null, ['ProgressBarApp.js', 'manifest.json']);
  logger.info('- Test build with entrypoint as arg ðŸš€');
}

function testBuild(logger) {
  logger.warn('\nBuild Tests started - External Devs ðŸ¤ž');
  testDefaultBuildPath(logger);
  testBuildWithExtensionFlag(logger);
  logger.info('Build Tests passed - External DevsðŸš€');

  logger.warn('\nBuild Tests started - Dev Infra ðŸ¤ž');
  testDefInfraBuildFileName(logger);
  logger.info('Build Tests passed - Dev Infra ðŸš€');
}

module.exports = {
  testBuild,
};
