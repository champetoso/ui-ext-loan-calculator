import { ReactNode, ComponentType } from 'react';
export interface AlertProps {
    title: string;
    children?: ReactNode;
    variant?: 'info' | 'warning' | 'success' | 'error' | 'danger';
}
export interface ButtonProps {
    onClick?: () => void;
    href?: string;
    disabled?: boolean;
    variant?: 'primary' | 'secondary' | 'destructive';
    type?: 'button' | 'reset' | 'submit';
    children: ReactNode;
}
export interface ButtonRowProps {
    children: ReactNode;
    disableDropdown?: boolean;
}
export interface CardProps {
    children: ReactNode;
}
export interface DescriptionListItemProps {
    children: ReactNode;
    label: string;
}
export interface DescriptionListProps {
    children: ReactNode;
    direction?: 'row' | 'column';
}
export interface DividerProps {
    distance?: AllDistances;
}
export interface EmptyStateProps {
    flush?: boolean;
    children: ReactNode;
    title?: string;
    layout?: 'horizontal' | 'vertical';
    reverseOrder?: boolean;
    imageWidth?: number;
}
export interface ErrorStateProps {
    children: ReactNode;
    title?: string;
    type?: 'error' | 'support' | 'lock';
}
export type FormInputValues = Record<string, string | number>;
export interface FormProps {
    children: ReactNode;
    onSubmit?: (event: RemoteEvent<FormInputValues>) => void;
    preventDefault?: boolean;
}
export interface HeadingProps {
    children: ReactNode;
    inline?: boolean;
}
export interface ImageProps {
    alt?: string;
    href?: string;
    onClick?: () => void;
    src: string;
    width?: number;
    height?: number;
}
export interface InputProps<T = string> {
    label: string;
    name: string;
    value?: T;
    required?: boolean;
    readOnly?: boolean;
    description?: string;
    tooltip?: string;
    placeholder?: string;
    error?: boolean;
    defaultValue?: T;
    validationMessage?: string;
    onChange?: (value: T) => void;
    onInput?: (value: T) => void;
    onBlur?: (value: T) => void;
    onFocus?: (value: T) => void;
}
export interface TextareaProps extends InputProps {
    cols?: number;
    maxLength?: number;
    rows?: number;
    resize?: 'vertical' | 'horizontal' | 'both' | 'none';
}
export interface NumberInputProps extends InputProps<number> {
    min?: number;
    max?: number;
    precision?: number;
    formatStyle?: 'decimal' | 'percentage';
}
export interface ProgressBarProps {
    title?: string;
    showPercentage?: boolean;
    value?: number;
    valueMax?: number;
    valueDescription?: string;
    variant?: 'success' | 'danger' | 'warning';
}
export interface SelectProps {
    label: string;
    name: string;
    value?: string | number;
    required?: boolean;
    readOnly?: boolean;
    description?: string;
    tooltip?: string;
    placeholder?: string;
    error?: boolean;
    validationMessage?: string;
    onChange?: (value: SelectProps['value']) => void;
    options: {
        label: string;
        value: string | number;
    }[];
}
export interface TagProps {
    children: ReactNode;
    onClick?: () => void;
    variant?: 'default' | 'warning' | 'success' | 'error';
}
export interface TextFormatOptions {
    fontWeight?: 'regular' | 'bold' | 'demibold';
    italic?: boolean;
    lineDecoration?: 'none' | 'underline' | 'strikethrough';
}
export type TextProps = {
    variant?: 'bodytext' | 'microcopy';
    inline?: boolean;
    children: ReactNode;
    format?: TextFormatOptions;
};
export interface TileProps {
    children: ReactNode;
    flush?: boolean;
}
interface Team {
    id: number;
    name: string;
    teammates: number[];
}
export type ToggleGroupOption = {
    label: string;
    value: string;
    initialIsChecked?: boolean;
    readonly?: boolean;
    description?: string;
};
interface ToggleGroupListBaseProps {
    name: ToggleGroupProps['name'];
    options: ToggleGroupProps['options'];
    variant: ToggleGroupProps['variant'];
    inline?: boolean;
}
export interface CheckboxListProps extends ToggleGroupListBaseProps {
    value?: CheckboxGroupProps['value'];
    onChange?: CheckboxGroupProps['onChange'];
}
export interface RadioButtonListProps extends ToggleGroupListBaseProps {
    value?: RadioButtonGroupProps['value'];
    onChange?: RadioButtonGroupProps['onChange'];
}
interface CheckboxGroupProps {
    toggleType: 'checkboxList';
    onChange?: (value: this['value']) => void;
    value?: string[];
}
interface RadioButtonGroupProps {
    toggleType: 'radioButtonList';
    onChange?: (value: this['value']) => void;
    value?: string;
}
export type ToggleGroupProps = {
    name: string;
    label: string;
    validationMessage?: string;
    required?: boolean;
    tooltip?: string;
    error?: boolean;
    options: Array<ToggleGroupOption>;
    inline?: boolean;
    variant?: 'default' | 'small';
} & (CheckboxGroupProps | RadioButtonGroupProps);
export interface UserContext {
    id: number;
    emails: string[];
    email: string;
    firstName: string;
    lastName: string;
    roles: string[];
    teams: Team[];
    locale?: string;
}
export interface PortalContext {
    id: number;
    timezone: string;
}
export interface Context {
    user: UserContext;
    portal: PortalContext;
}
export interface StackProps {
    distance?: AllDistances;
    children?: React.ReactNode;
    direction?: 'row' | 'column';
    justify?: 'center' | 'end' | 'start';
    align?: 'start' | 'center' | 'baseline' | 'end' | 'stretch';
    width?: 'auto' | '100%';
}
export interface StatisticsTrendProps {
    value: string;
    direction: 'increase' | 'decrease';
}
export interface StatisticsItemProps {
    id?: string;
    label: string;
    number: string;
    children: ReactNode;
}
export interface StatisticsProps {
    children: ReactNode;
}
export interface ServerlessRunnerParams {
    /**
     * Name of the serverless function
     */
    name: string;
    /**
     * Names of CRM object properties to be retrieved and supplied to the function as `context.propertiesToSend`
     */
    propertiesToSend?: string[];
    /**
     * Additional parameters to be supplied to the function as `context.parameters`
     */
    parameters?: JsonValue;
    /**
     * @deprecated Optional payload supplied to the function as `context.event.payload`.
     * Support for this param may be removed in the future. Use `parameters` instead.
     */
    payload?: JsonValue;
}
export declare enum ServerlessExecutionStatus {
    Success = "SUCCESS",
    Error = "ERROR"
}
export type ServerlessExecutionResult = {
    status: ServerlessExecutionStatus.Success;
    response: JsonValue;
} | {
    status: ServerlessExecutionStatus.Error;
    message: string;
};
export type ServerlessFuncRunner = (params: ServerlessRunnerParams) => Promise<ServerlessExecutionResult>;
export interface ServerlessExecutionRequest {
    appId: number;
    extensibleCardId: number;
    serverlessFunction: string;
    location: keyof ExtensionPoints;
    objectQuery?: {
        objectId: number;
        objectTypeId: string;
        objectPropertyNames: string[];
    };
    parameters?: JsonValue;
    event?: {
        type: 'SERVERLESS_ACTION_HOOK';
        payload: JsonValue;
    };
    objectId?: number;
    objectTypeId?: string;
}
export interface ServerlessExecutionResponse {
    logId: string;
    response?: JsonValue;
}
export interface ServerlessErrorResponse {
    responseJSON?: {
        message: string;
        correlationId: string;
        category: string;
        subCategory?: string;
        errors?: {
            message: string;
            subCategory: string;
        }[];
    };
    status: number;
}
export interface ExtensionCardContextData {
    cardId: string;
    appId: number | string;
    objectId: number | string;
    objectTypeId: string;
    location: keyof ExtensionPoints;
}
export type ExtensionPointAction = (...args: any[]) => Promise<any> | void;
export interface ExtensionPointContract {
    actions?: {
        [k: string]: ExtensionPointAction;
    } | {};
    customComponents: Record<string, ComponentType<any>>;
}
type AlertType = 'info' | 'warning' | 'success' | 'danger' | 'tip' | undefined;
export type AddAlertAction = (args: {
    type?: AlertType;
    message: string;
}) => void;
export type ReloadPageAction = () => void;
export type FetchCrmObjectPropertiesAction = (properties: string[]) => Promise<Record<string, string>>;
export type OpenIframeModalAction = (action: OpenIframeActionPayload) => void;
export interface CrmMiddleExtensionPoint extends ExtensionPointContract {
    actions: {
        addAlert: AddAlertAction;
        reloadPage: ReloadPageAction;
        fetchCrmObjectProperties: FetchCrmObjectPropertiesAction;
        openIframeModal: OpenIframeModalAction;
    };
    customComponents: {
        CrmPropertyList: ComponentType<CrmPropertyListProps>;
        CrmAssociationTable: ComponentType<CrmAssociationTableProps>;
        CrmDataHighlight: ComponentType<CrmDataHighlightProps>;
        CrmReport: ComponentType<CrmReportProps>;
        CrmAssociationPivot: ComponentType<CrmAssociationPivotProps>;
        CrmObjectProperty?: ComponentType<CrmObjectPropertyProps>;
        CrmAssociationPropertyList?: ComponentType<CrmAssociationPropertyListProps>;
    };
}
export interface CrmDataHighlightProps {
    properties: Array<string>;
    objectTypeId?: string;
    objectId?: number;
}
export interface CrmReportProps {
    reportId: string;
}
export interface CrmPropertyListProps {
    properties: Array<string>;
    direction?: string;
    objectTypeId?: string;
    objectId?: number;
}
export interface CrmObjectPropertyProps {
    properties: Array<string>;
    objectTypeId?: string;
    objectId?: number;
}
type CrmSortDescriptor = {
    columnName: string;
    direction: 1 | -1;
};
interface CrmSearchFilter {
    operator: 'EQ' | 'NEQ' | 'LT' | 'LTE' | 'GT' | 'GTE' | 'BETWEEN' | 'IN' | 'NOT_IN' | 'HAS_PROPERTY' | 'NOT_HAS_PROPERTY';
    value?: string | number;
    values?: string | number;
    highValue?: string | number;
    property: string;
}
export interface CrmAssociationTableProps {
    objectTypeId: string;
    propertyColumns: Array<string>;
    quickFilterProperties?: Array<string>;
    searchable?: boolean;
    pagination?: boolean;
    pageSize?: number;
    preFilters?: Array<CrmSearchFilter>;
    sort?: Array<CrmSortDescriptor>;
}
export interface CrmAssociationPivotProps {
    objectTypeId: string;
    associationLabels?: Array<string>;
    maxAssociations?: number;
    preFilters?: Array<CrmSearchFilter>;
    sort?: Array<CrmSortDescriptor>;
}
export interface CrmAssociationPropertyListProps {
    objectTypeId: string;
    properties: Array<string>;
    associationLabels?: Array<string>;
    filters?: Array<CrmSearchFilter>;
    sort?: Array<CrmSortDescriptor>;
}
interface CrmSidebarExtensionPoint extends ExtensionPointContract {
    actions: {
        reloadPage: ReloadPageAction;
    };
}
interface RemotePlaygroundExtensionPoint extends ExtensionPointContract {
    actions: {
        warn: () => void;
    };
    customComponents: {
        ExampleCrmComponent: ComponentType<ExampleCrmComponentProps>;
    };
}
export interface ExtensionPoints {
    'uie.playground.middle': RemotePlaygroundExtensionPoint;
    'crm.record.tab': CrmMiddleExtensionPoint;
    'crm.record.sidebar': CrmSidebarExtensionPoint;
}
export interface ExampleCrmComponentProps {
    name: string;
    size: 'sm' | 'md' | 'lg';
    count: number;
}
export interface ExtensionPointApi<ExtensionPointName extends keyof ExtensionPoints> {
    context: Context;
    runServerlessFunction: ServerlessFuncRunner;
    actions: ExtensionPoints[ExtensionPointName]['actions'];
}
interface OpenIframeActionPayload {
    uri: string;
    height: number;
    width: number;
    associatedObjectProperties?: string[];
}
export interface LoadingSpinnerProps {
    label: string;
    showLabel?: boolean;
    size?: TShirtSizes['xs'] | TShirtSizes['sm'] | TShirtSizes['md'];
    layout?: 'inline' | 'centered';
}
export interface TableElementProps {
    children: React.ReactNode;
}
interface BaseTableProps {
    bordered?: boolean;
    flush?: boolean;
    children: React.ReactNode;
}
export interface TableNoPaginatedProps extends BaseTableProps {
    paginated?: false;
}
export interface TablePaginatedProps extends BaseTableProps {
    paginated: true;
    pageCount: number;
    onPageChange: (pageNumber: number) => void;
    showButtonLabels?: boolean;
    showFirstLastButtons?: boolean;
    maxVisiblePageButtons?: number;
    page?: number;
}
export type TableProps = TableNoPaginatedProps | TablePaginatedProps;
export declare class RemoteEvent<V> {
    type: string;
    bubbles: boolean;
    timeStamp: number;
    targetValue: V;
    constructor(value: V, event: Event);
}
export interface LinkProps {
    children: ReactNode;
    href: string;
    variant?: 'primary' | 'destructive' | 'light' | 'dark';
    onClick?: () => void;
}
export type JsonValue = string | number | boolean | null | JsonValue[] | {
    [key: string]: JsonValue;
};
export interface BoxProps {
    children: ReactNode;
    grow?: boolean;
    alignSelf?: 'start' | 'center' | 'baseline' | 'end' | 'stretch' | 'auto';
}
interface TShirtSizes {
    xs: 'extra-small' | 'xs';
    sm: 'small' | 'sm';
    md: 'medium' | 'md';
    lg: 'large' | 'lg';
    xl: 'extra-large' | 'xl';
}
export type AllSizes = TShirtSizes['xs'] | TShirtSizes['sm'] | TShirtSizes['md'] | TShirtSizes['lg'] | TShirtSizes['xl'];
export type AllDistances = 'flush' | AllSizes;
export {};
